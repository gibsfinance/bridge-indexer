/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "BridgedTokensRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgedTokensRegistry__factory>;
    getContractFactory(
      name: "ERC677BridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677BridgeToken__factory>;
    getContractFactory(
      name: "ERC677BridgeTokenRewardable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardable__factory>;
    getContractFactory(
      name: "ERC677MultiBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677MultiBridgeToken__factory>;
    getContractFactory(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePaymaster__factory>;
    getContractFactory(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRelayRecipient__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "IKnowForwarderAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKnowForwarderAddress__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IRelayHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayHub__factory>;
    getContractFactory(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayRecipient__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "TokenPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPaymaster__factory>;
    getContractFactory(
      name: "AMBBridgeHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMBBridgeHelper__factory>;
    getContractFactory(
      name: "IHomeBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHomeBridge__factory>;
    getContractFactory(
      name: "Erc20ToNativeBridgeHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20ToNativeBridgeHelper__factory>;
    getContractFactory(
      name: "IHomeErc20ToNativeBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHomeErc20ToNativeBridge__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "LegacyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyERC20__factory>;
    getContractFactory(
      name: "ERC677Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Receiver__factory>;
    getContractFactory(
      name: "IAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAMB__factory>;
    getContractFactory(
      name: "IAMBInformationReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAMBInformationReceiver__factory>;
    getContractFactory(
      name: "IBlockReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockReward__factory>;
    getContractFactory(
      name: "IBridgeValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeValidators__factory>;
    getContractFactory(
      name: "IBurnableMintableERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnableMintableERC677Token__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICToken__factory>;
    getContractFactory(
      name: "IERC677BNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677BNB__factory>;
    getContractFactory(
      name: "LegacyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyERC20__factory>;
    getContractFactory(
      name: "IGasToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasToken__factory>;
    getContractFactory(
      name: "IInterestReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterestReceiver__factory>;
    getContractFactory(
      name: "IMediatorFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMediatorFeeManager__factory>;
    getContractFactory(
      name: "IMintHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintHandler__factory>;
    getContractFactory(
      name: "IRewardableValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardableValidators__factory>;
    getContractFactory(
      name: "IUniswapRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV2__factory>;
    getContractFactory(
      name: "IUpgradeabilityOwnerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeabilityOwnerStorage__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "AMBMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMBMock__factory>;
    getContractFactory(
      name: "BlockRewardMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockRewardMock__factory>;
    getContractFactory(
      name: "Box",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Box__factory>;
    getContractFactory(
      name: "BridgeValidatorsDeterministic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeValidatorsDeterministic__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC677BridgeTokenRewardableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardableMock__factory>;
    getContractFactory(
      name: "ERC677ReceiverTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677ReceiverTest__factory>;
    getContractFactory(
      name: "FeeManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManagerMock__factory>;
    getContractFactory(
      name: "FeeReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeReceiverMock__factory>;
    getContractFactory(
      name: "ForeignAMBWithGasTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForeignAMBWithGasTokenMock__factory>;
    getContractFactory(
      name: "GasTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasTokenMock__factory>;
    getContractFactory(
      name: "IHarnessComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHarnessComptroller__factory>;
    getContractFactory(
      name: "MessageTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageTest__factory>;
    getContractFactory(
      name: "MintHandlerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintHandlerMock__factory>;
    getContractFactory(
      name: "NoReturnTransferTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoReturnTransferTokenMock__factory>;
    getContractFactory(
      name: "OldBlockReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OldBlockReward__factory>;
    getContractFactory(
      name: "RevertFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertFallback__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "UniswapRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapRouterMock__factory>;
    getContractFactory(
      name: "XDaiForeignBridgeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XDaiForeignBridgeMock__factory>;
    getContractFactory(
      name: "PermittableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermittableToken__factory>;
    getContractFactory(
      name: "ReentrancyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyV2__factory>;
    getContractFactory(
      name: "TokenOmnibridgeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenOmnibridgeRouter__factory>;
    getContractFactory(
      name: "IAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAMB__factory>;
    getContractFactory(
      name: "IBasicAMBMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicAMBMediator__factory>;
    getContractFactory(
      name: "IBasicForeignAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicForeignAMB__factory>;
    getContractFactory(
      name: "IBasicOmnibridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicOmnibridge__factory>;
    getContractFactory(
      name: "IBasicOmnibridgeBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicOmnibridgeBNB__factory>;
    getContractFactory(
      name: "IBridgeValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeValidators__factory>;
    getContractFactory(
      name: "IOmnibridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmnibridge__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "OwnableModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableModule__factory>;
    getContractFactory(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sacrifice__factory>;
    getContractFactory(
      name: "TransientReentrancy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransientReentrancy__factory>;
    getContractFactory(
      name: "WETHOmnibridgeRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHOmnibridgeRouterV2__factory>;
    getContractFactory(
      name: "UniV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV2Router02__factory>;
    getContractFactory(
      name: "EternalStorageProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EternalStorageProxy__factory>;
    getContractFactory(
      name: "OwnedUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnedUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityOwnerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityOwnerStorage__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "UpgradeabilityStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityStorage__factory>;
    getContractFactory(
      name: "BasicAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicAMBErc677ToErc677__factory>;
    getContractFactory(
      name: "ForeignAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForeignAMBErc677ToErc677__factory>;
    getContractFactory(
      name: "HomeAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HomeAMBErc677ToErc677__factory>;
    getContractFactory(
      name: "AsyncInformationProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncInformationProcessor__factory>;
    getContractFactory(
      name: "BasicAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicAMB__factory>;
    getContractFactory(
      name: "BasicForeignAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicForeignAMB__factory>;
    getContractFactory(
      name: "BasicHomeAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicHomeAMB__factory>;
    getContractFactory(
      name: "ForeignAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForeignAMB__factory>;
    getContractFactory(
      name: "ForeignAMBWithGasToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForeignAMBWithGasToken__factory>;
    getContractFactory(
      name: "HomeAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HomeAMB__factory>;
    getContractFactory(
      name: "MessageDelivery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageDelivery__factory>;
    getContractFactory(
      name: "MessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageProcessor__factory>;
    getContractFactory(
      name: "VersionableAMB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VersionableAMB__factory>;
    getContractFactory(
      name: "BaseBridgeValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBridgeValidators__factory>;
    getContractFactory(
      name: "BaseERC677Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseERC677Bridge__factory>;
    getContractFactory(
      name: "BaseFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseFeeManager__factory>;
    getContractFactory(
      name: "BaseOverdrawManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOverdrawManagement__factory>;
    getContractFactory(
      name: "BasicAMBMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicAMBMediator__factory>;
    getContractFactory(
      name: "BasicBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicBridge__factory>;
    getContractFactory(
      name: "BasicForeignBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicForeignBridge__factory>;
    getContractFactory(
      name: "BasicHomeBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicHomeBridge__factory>;
    getContractFactory(
      name: "BasicTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicTokenBridge__factory>;
    getContractFactory(
      name: "BlockRewardFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockRewardFeeManager__factory>;
    getContractFactory(
      name: "BridgeValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeValidators__factory>;
    getContractFactory(
      name: "DecimalShiftBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecimalShiftBridge__factory>;
    getContractFactory(
      name: "CompoundConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundConnector__factory>;
    getContractFactory(
      name: "FeeManagerErcToNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManagerErcToNative__factory>;
    getContractFactory(
      name: "FeeManagerErcToNativePOSDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManagerErcToNativePOSDAO__factory>;
    getContractFactory(
      name: "ForeignBridgeErcToNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForeignBridgeErcToNative__factory>;
    getContractFactory(
      name: "HomeBridgeErcToNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HomeBridgeErcToNative__factory>;
    getContractFactory(
      name: "InterestConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestConnector__factory>;
    getContractFactory(
      name: "RewardableHomeBridgeErcToNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardableHomeBridgeErcToNative__factory>;
    getContractFactory(
      name: "XDaiForeignBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XDaiForeignBridge__factory>;
    getContractFactory(
      name: "ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Bridge__factory>;
    getContractFactory(
      name: "GasTokenConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasTokenConnector__factory>;
    getContractFactory(
      name: "GSNForeignERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GSNForeignERC20Bridge__factory>;
    getContractFactory(
      name: "HomeOverdrawManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HomeOverdrawManagement__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "InitializableBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableBridge__factory>;
    getContractFactory(
      name: "InterestReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestReceiverBase__factory>;
    getContractFactory(
      name: "InterestReceiverStakeBuyback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestReceiverStakeBuyback__factory>;
    getContractFactory(
      name: "InterestReceiverSwapToETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestReceiverSwapToETH__factory>;
    getContractFactory(
      name: "MediatorBalanceStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MediatorBalanceStorage__factory>;
    getContractFactory(
      name: "MessageRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageRelay__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "RewardableBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardableBridge__factory>;
    getContractFactory(
      name: "RewardableValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardableValidators__factory>;
    getContractFactory(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sacrifice__factory>;
    getContractFactory(
      name: "TokenBridgeMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBridgeMediator__factory>;
    getContractFactory(
      name: "TransferInfoStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferInfoStorage__factory>;
    getContractFactory(
      name: "Validatable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Validatable__factory>;
    getContractFactory(
      name: "ValidatorsFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorsFeeManager__factory>;
    getContractFactory(
      name: "VersionableBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VersionableBridge__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "BurnableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnableToken__factory>;
    getContractFactory(
      name: "DetailedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DetailedERC20__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;

    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "BridgedTokensRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgedTokensRegistry>;
    getContractAt(
      name: "ERC677BridgeToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677BridgeToken>;
    getContractAt(
      name: "ERC677BridgeTokenRewardable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677BridgeTokenRewardable>;
    getContractAt(
      name: "ERC677MultiBridgeToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677MultiBridgeToken>;
    getContractAt(
      name: "BasePaymaster",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePaymaster>;
    getContractAt(
      name: "BaseRelayRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRelayRecipient>;
    getContractAt(
      name: "IForwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "IKnowForwarderAddress",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKnowForwarderAddress>;
    getContractAt(
      name: "IPaymaster",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IRelayHub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayHub>;
    getContractAt(
      name: "IRelayRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayRecipient>;
    getContractAt(
      name: "IStakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "TokenPaymaster",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPaymaster>;
    getContractAt(
      name: "AMBBridgeHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AMBBridgeHelper>;
    getContractAt(
      name: "IHomeBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHomeBridge>;
    getContractAt(
      name: "Erc20ToNativeBridgeHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20ToNativeBridgeHelper>;
    getContractAt(
      name: "IHomeErc20ToNativeBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHomeErc20ToNativeBridge>;
    getContractAt(
      name: "ERC677",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "LegacyERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyERC20>;
    getContractAt(
      name: "ERC677Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Receiver>;
    getContractAt(
      name: "IAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAMB>;
    getContractAt(
      name: "IAMBInformationReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAMBInformationReceiver>;
    getContractAt(
      name: "IBlockReward",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockReward>;
    getContractAt(
      name: "IBridgeValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeValidators>;
    getContractAt(
      name: "IBurnableMintableERC677Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBurnableMintableERC677Token>;
    getContractAt(
      name: "IComptroller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptroller>;
    getContractAt(
      name: "ICToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICToken>;
    getContractAt(
      name: "IERC677BNB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC677BNB>;
    getContractAt(
      name: "LegacyERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyERC20>;
    getContractAt(
      name: "IGasToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasToken>;
    getContractAt(
      name: "IInterestReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterestReceiver>;
    getContractAt(
      name: "IMediatorFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMediatorFeeManager>;
    getContractAt(
      name: "IMintHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintHandler>;
    getContractAt(
      name: "IRewardableValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardableValidators>;
    getContractAt(
      name: "IUniswapRouterV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV2>;
    getContractAt(
      name: "IUpgradeabilityOwnerStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeabilityOwnerStorage>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "AMBMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AMBMock>;
    getContractAt(
      name: "BlockRewardMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockRewardMock>;
    getContractAt(
      name: "Box",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Box>;
    getContractAt(
      name: "BridgeValidatorsDeterministic",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeValidatorsDeterministic>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC677BridgeTokenRewardableMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677BridgeTokenRewardableMock>;
    getContractAt(
      name: "ERC677ReceiverTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677ReceiverTest>;
    getContractAt(
      name: "FeeManagerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManagerMock>;
    getContractAt(
      name: "FeeReceiverMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeReceiverMock>;
    getContractAt(
      name: "ForeignAMBWithGasTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForeignAMBWithGasTokenMock>;
    getContractAt(
      name: "GasTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasTokenMock>;
    getContractAt(
      name: "IHarnessComptroller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHarnessComptroller>;
    getContractAt(
      name: "MessageTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageTest>;
    getContractAt(
      name: "MintHandlerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintHandlerMock>;
    getContractAt(
      name: "NoReturnTransferTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NoReturnTransferTokenMock>;
    getContractAt(
      name: "OldBlockReward",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OldBlockReward>;
    getContractAt(
      name: "RevertFallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertFallback>;
    getContractAt(
      name: "Staking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "UniswapRouterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapRouterMock>;
    getContractAt(
      name: "XDaiForeignBridgeMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XDaiForeignBridgeMock>;
    getContractAt(
      name: "PermittableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PermittableToken>;
    getContractAt(
      name: "ReentrancyV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyV2>;
    getContractAt(
      name: "TokenOmnibridgeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenOmnibridgeRouter>;
    getContractAt(
      name: "IAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAMB>;
    getContractAt(
      name: "IBasicAMBMediator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicAMBMediator>;
    getContractAt(
      name: "IBasicForeignAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicForeignAMB>;
    getContractAt(
      name: "IBasicOmnibridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicOmnibridge>;
    getContractAt(
      name: "IBasicOmnibridgeBNB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicOmnibridgeBNB>;
    getContractAt(
      name: "IBridgeValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeValidators>;
    getContractAt(
      name: "IOmnibridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmnibridge>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "OwnableModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableModule>;
    getContractAt(
      name: "Sacrifice",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Sacrifice>;
    getContractAt(
      name: "TransientReentrancy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransientReentrancy>;
    getContractAt(
      name: "WETHOmnibridgeRouterV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHOmnibridgeRouterV2>;
    getContractAt(
      name: "UniV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniV2Router02>;
    getContractAt(
      name: "EternalStorageProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EternalStorageProxy>;
    getContractAt(
      name: "OwnedUpgradeabilityProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnedUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityOwnerStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityOwnerStorage>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "UpgradeabilityStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityStorage>;
    getContractAt(
      name: "BasicAMBErc677ToErc677",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicAMBErc677ToErc677>;
    getContractAt(
      name: "ForeignAMBErc677ToErc677",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForeignAMBErc677ToErc677>;
    getContractAt(
      name: "HomeAMBErc677ToErc677",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HomeAMBErc677ToErc677>;
    getContractAt(
      name: "AsyncInformationProcessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncInformationProcessor>;
    getContractAt(
      name: "BasicAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicAMB>;
    getContractAt(
      name: "BasicForeignAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicForeignAMB>;
    getContractAt(
      name: "BasicHomeAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicHomeAMB>;
    getContractAt(
      name: "ForeignAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForeignAMB>;
    getContractAt(
      name: "ForeignAMBWithGasToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForeignAMBWithGasToken>;
    getContractAt(
      name: "HomeAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HomeAMB>;
    getContractAt(
      name: "MessageDelivery",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageDelivery>;
    getContractAt(
      name: "MessageProcessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageProcessor>;
    getContractAt(
      name: "VersionableAMB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VersionableAMB>;
    getContractAt(
      name: "BaseBridgeValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBridgeValidators>;
    getContractAt(
      name: "BaseERC677Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseERC677Bridge>;
    getContractAt(
      name: "BaseFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseFeeManager>;
    getContractAt(
      name: "BaseOverdrawManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOverdrawManagement>;
    getContractAt(
      name: "BasicAMBMediator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicAMBMediator>;
    getContractAt(
      name: "BasicBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicBridge>;
    getContractAt(
      name: "BasicForeignBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicForeignBridge>;
    getContractAt(
      name: "BasicHomeBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicHomeBridge>;
    getContractAt(
      name: "BasicTokenBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicTokenBridge>;
    getContractAt(
      name: "BlockRewardFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockRewardFeeManager>;
    getContractAt(
      name: "BridgeValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeValidators>;
    getContractAt(
      name: "DecimalShiftBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DecimalShiftBridge>;
    getContractAt(
      name: "CompoundConnector",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundConnector>;
    getContractAt(
      name: "FeeManagerErcToNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManagerErcToNative>;
    getContractAt(
      name: "FeeManagerErcToNativePOSDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManagerErcToNativePOSDAO>;
    getContractAt(
      name: "ForeignBridgeErcToNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForeignBridgeErcToNative>;
    getContractAt(
      name: "HomeBridgeErcToNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HomeBridgeErcToNative>;
    getContractAt(
      name: "InterestConnector",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestConnector>;
    getContractAt(
      name: "RewardableHomeBridgeErcToNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardableHomeBridgeErcToNative>;
    getContractAt(
      name: "XDaiForeignBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XDaiForeignBridge>;
    getContractAt(
      name: "ERC20Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Bridge>;
    getContractAt(
      name: "GasTokenConnector",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasTokenConnector>;
    getContractAt(
      name: "GSNForeignERC20Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GSNForeignERC20Bridge>;
    getContractAt(
      name: "HomeOverdrawManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HomeOverdrawManagement>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "InitializableBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableBridge>;
    getContractAt(
      name: "InterestReceiverBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestReceiverBase>;
    getContractAt(
      name: "InterestReceiverStakeBuyback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestReceiverStakeBuyback>;
    getContractAt(
      name: "InterestReceiverSwapToETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestReceiverSwapToETH>;
    getContractAt(
      name: "MediatorBalanceStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MediatorBalanceStorage>;
    getContractAt(
      name: "MessageRelay",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageRelay>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "RewardableBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardableBridge>;
    getContractAt(
      name: "RewardableValidators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardableValidators>;
    getContractAt(
      name: "Sacrifice",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Sacrifice>;
    getContractAt(
      name: "TokenBridgeMediator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBridgeMediator>;
    getContractAt(
      name: "TransferInfoStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferInfoStorage>;
    getContractAt(
      name: "Validatable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Validatable>;
    getContractAt(
      name: "ValidatorsFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorsFeeManager>;
    getContractAt(
      name: "VersionableBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VersionableBridge>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BasicToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "BurnableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnableToken>;
    getContractAt(
      name: "DetailedERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DetailedERC20>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "MintableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableToken>;
    getContractAt(
      name: "StandardToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;

    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "BridgedTokensRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgedTokensRegistry>;
    deployContract(
      name: "ERC677BridgeToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeToken>;
    deployContract(
      name: "ERC677BridgeTokenRewardable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardable>;
    deployContract(
      name: "ERC677MultiBridgeToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677MultiBridgeToken>;
    deployContract(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasePaymaster>;
    deployContract(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRelayRecipient>;
    deployContract(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarder>;
    deployContract(
      name: "IKnowForwarderAddress",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKnowForwarderAddress>;
    deployContract(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymaster>;
    deployContract(
      name: "IRelayHub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayHub>;
    deployContract(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayRecipient>;
    deployContract(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "TokenPaymaster",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenPaymaster>;
    deployContract(
      name: "AMBBridgeHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMBBridgeHelper>;
    deployContract(
      name: "IHomeBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHomeBridge>;
    deployContract(
      name: "Erc20ToNativeBridgeHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20ToNativeBridgeHelper>;
    deployContract(
      name: "IHomeErc20ToNativeBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHomeErc20ToNativeBridge>;
    deployContract(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677>;
    deployContract(
      name: "LegacyERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LegacyERC20>;
    deployContract(
      name: "ERC677Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677Receiver>;
    deployContract(
      name: "IAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMB>;
    deployContract(
      name: "IAMBInformationReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMBInformationReceiver>;
    deployContract(
      name: "IBlockReward",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlockReward>;
    deployContract(
      name: "IBridgeValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeValidators>;
    deployContract(
      name: "IBurnableMintableERC677Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBurnableMintableERC677Token>;
    deployContract(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComptroller>;
    deployContract(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICToken>;
    deployContract(
      name: "IERC677BNB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC677BNB>;
    deployContract(
      name: "LegacyERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LegacyERC20>;
    deployContract(
      name: "IGasToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasToken>;
    deployContract(
      name: "IInterestReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterestReceiver>;
    deployContract(
      name: "IMediatorFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMediatorFeeManager>;
    deployContract(
      name: "IMintHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintHandler>;
    deployContract(
      name: "IRewardableValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardableValidators>;
    deployContract(
      name: "IUniswapRouterV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV2>;
    deployContract(
      name: "IUpgradeabilityOwnerStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUpgradeabilityOwnerStorage>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "AMBMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMBMock>;
    deployContract(
      name: "BlockRewardMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardMock>;
    deployContract(
      name: "Box",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Box>;
    deployContract(
      name: "BridgeValidatorsDeterministic",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeValidatorsDeterministic>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "ERC677BridgeTokenRewardableMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardableMock>;
    deployContract(
      name: "ERC677ReceiverTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677ReceiverTest>;
    deployContract(
      name: "FeeManagerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerMock>;
    deployContract(
      name: "FeeReceiverMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeReceiverMock>;
    deployContract(
      name: "ForeignAMBWithGasTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBWithGasTokenMock>;
    deployContract(
      name: "GasTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasTokenMock>;
    deployContract(
      name: "IHarnessComptroller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHarnessComptroller>;
    deployContract(
      name: "MessageTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageTest>;
    deployContract(
      name: "MintHandlerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintHandlerMock>;
    deployContract(
      name: "NoReturnTransferTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoReturnTransferTokenMock>;
    deployContract(
      name: "OldBlockReward",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OldBlockReward>;
    deployContract(
      name: "RevertFallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertFallback>;
    deployContract(
      name: "Staking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "UniswapRouterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapRouterMock>;
    deployContract(
      name: "XDaiForeignBridgeMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XDaiForeignBridgeMock>;
    deployContract(
      name: "PermittableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermittableToken>;
    deployContract(
      name: "ReentrancyV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyV2>;
    deployContract(
      name: "TokenOmnibridgeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenOmnibridgeRouter>;
    deployContract(
      name: "IAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMB>;
    deployContract(
      name: "IBasicAMBMediator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicAMBMediator>;
    deployContract(
      name: "IBasicForeignAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicForeignAMB>;
    deployContract(
      name: "IBasicOmnibridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicOmnibridge>;
    deployContract(
      name: "IBasicOmnibridgeBNB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicOmnibridgeBNB>;
    deployContract(
      name: "IBridgeValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeValidators>;
    deployContract(
      name: "IOmnibridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmnibridge>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "OwnableModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableModule>;
    deployContract(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sacrifice>;
    deployContract(
      name: "TransientReentrancy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransientReentrancy>;
    deployContract(
      name: "WETHOmnibridgeRouterV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETHOmnibridgeRouterV2>;
    deployContract(
      name: "UniV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniV2Router02>;
    deployContract(
      name: "EternalStorageProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxy>;
    deployContract(
      name: "OwnedUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnedUpgradeabilityProxy>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "UpgradeabilityOwnerStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityOwnerStorage>;
    deployContract(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityProxy>;
    deployContract(
      name: "UpgradeabilityStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityStorage>;
    deployContract(
      name: "BasicAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMBErc677ToErc677>;
    deployContract(
      name: "ForeignAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBErc677ToErc677>;
    deployContract(
      name: "HomeAMBErc677ToErc677",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeAMBErc677ToErc677>;
    deployContract(
      name: "AsyncInformationProcessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsyncInformationProcessor>;
    deployContract(
      name: "BasicAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMB>;
    deployContract(
      name: "BasicForeignAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicForeignAMB>;
    deployContract(
      name: "BasicHomeAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicHomeAMB>;
    deployContract(
      name: "ForeignAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMB>;
    deployContract(
      name: "ForeignAMBWithGasToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBWithGasToken>;
    deployContract(
      name: "HomeAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeAMB>;
    deployContract(
      name: "MessageDelivery",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageDelivery>;
    deployContract(
      name: "MessageProcessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessor>;
    deployContract(
      name: "VersionableAMB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionableAMB>;
    deployContract(
      name: "BaseBridgeValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBridgeValidators>;
    deployContract(
      name: "BaseERC677Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseERC677Bridge>;
    deployContract(
      name: "BaseFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseFeeManager>;
    deployContract(
      name: "BaseOverdrawManagement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseOverdrawManagement>;
    deployContract(
      name: "BasicAMBMediator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMBMediator>;
    deployContract(
      name: "BasicBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicBridge>;
    deployContract(
      name: "BasicForeignBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicForeignBridge>;
    deployContract(
      name: "BasicHomeBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicHomeBridge>;
    deployContract(
      name: "BasicTokenBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicTokenBridge>;
    deployContract(
      name: "BlockRewardFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardFeeManager>;
    deployContract(
      name: "BridgeValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeValidators>;
    deployContract(
      name: "DecimalShiftBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DecimalShiftBridge>;
    deployContract(
      name: "CompoundConnector",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CompoundConnector>;
    deployContract(
      name: "FeeManagerErcToNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerErcToNative>;
    deployContract(
      name: "FeeManagerErcToNativePOSDAO",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerErcToNativePOSDAO>;
    deployContract(
      name: "ForeignBridgeErcToNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignBridgeErcToNative>;
    deployContract(
      name: "HomeBridgeErcToNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeBridgeErcToNative>;
    deployContract(
      name: "InterestConnector",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestConnector>;
    deployContract(
      name: "RewardableHomeBridgeErcToNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableHomeBridgeErcToNative>;
    deployContract(
      name: "XDaiForeignBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XDaiForeignBridge>;
    deployContract(
      name: "ERC20Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Bridge>;
    deployContract(
      name: "GasTokenConnector",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasTokenConnector>;
    deployContract(
      name: "GSNForeignERC20Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GSNForeignERC20Bridge>;
    deployContract(
      name: "HomeOverdrawManagement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeOverdrawManagement>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "InitializableBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitializableBridge>;
    deployContract(
      name: "InterestReceiverBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverBase>;
    deployContract(
      name: "InterestReceiverStakeBuyback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverStakeBuyback>;
    deployContract(
      name: "InterestReceiverSwapToETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverSwapToETH>;
    deployContract(
      name: "MediatorBalanceStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MediatorBalanceStorage>;
    deployContract(
      name: "MessageRelay",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageRelay>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "RewardableBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableBridge>;
    deployContract(
      name: "RewardableValidators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableValidators>;
    deployContract(
      name: "Sacrifice",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sacrifice>;
    deployContract(
      name: "TokenBridgeMediator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBridgeMediator>;
    deployContract(
      name: "TransferInfoStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferInfoStorage>;
    deployContract(
      name: "Validatable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Validatable>;
    deployContract(
      name: "ValidatorsFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorsFeeManager>;
    deployContract(
      name: "VersionableBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionableBridge>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicToken>;
    deployContract(
      name: "BurnableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnableToken>;
    deployContract(
      name: "DetailedERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DetailedERC20>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableToken>;
    deployContract(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;

    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "BridgedTokensRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgedTokensRegistry>;
    deployContract(
      name: "ERC677BridgeToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeToken>;
    deployContract(
      name: "ERC677BridgeTokenRewardable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardable>;
    deployContract(
      name: "ERC677MultiBridgeToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677MultiBridgeToken>;
    deployContract(
      name: "BasePaymaster",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasePaymaster>;
    deployContract(
      name: "BaseRelayRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRelayRecipient>;
    deployContract(
      name: "IForwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarder>;
    deployContract(
      name: "IKnowForwarderAddress",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKnowForwarderAddress>;
    deployContract(
      name: "IPaymaster",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymaster>;
    deployContract(
      name: "IRelayHub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayHub>;
    deployContract(
      name: "IRelayRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayRecipient>;
    deployContract(
      name: "IStakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "TokenPaymaster",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenPaymaster>;
    deployContract(
      name: "AMBBridgeHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMBBridgeHelper>;
    deployContract(
      name: "IHomeBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHomeBridge>;
    deployContract(
      name: "Erc20ToNativeBridgeHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Erc20ToNativeBridgeHelper>;
    deployContract(
      name: "IHomeErc20ToNativeBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHomeErc20ToNativeBridge>;
    deployContract(
      name: "ERC677",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677>;
    deployContract(
      name: "LegacyERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LegacyERC20>;
    deployContract(
      name: "ERC677Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677Receiver>;
    deployContract(
      name: "IAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMB>;
    deployContract(
      name: "IAMBInformationReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMBInformationReceiver>;
    deployContract(
      name: "IBlockReward",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlockReward>;
    deployContract(
      name: "IBridgeValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeValidators>;
    deployContract(
      name: "IBurnableMintableERC677Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBurnableMintableERC677Token>;
    deployContract(
      name: "IComptroller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComptroller>;
    deployContract(
      name: "ICToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICToken>;
    deployContract(
      name: "IERC677BNB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC677BNB>;
    deployContract(
      name: "LegacyERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LegacyERC20>;
    deployContract(
      name: "IGasToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasToken>;
    deployContract(
      name: "IInterestReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterestReceiver>;
    deployContract(
      name: "IMediatorFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMediatorFeeManager>;
    deployContract(
      name: "IMintHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintHandler>;
    deployContract(
      name: "IRewardableValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardableValidators>;
    deployContract(
      name: "IUniswapRouterV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapRouterV2>;
    deployContract(
      name: "IUpgradeabilityOwnerStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUpgradeabilityOwnerStorage>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "AMBMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMBMock>;
    deployContract(
      name: "BlockRewardMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardMock>;
    deployContract(
      name: "Box",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Box>;
    deployContract(
      name: "BridgeValidatorsDeterministic",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeValidatorsDeterministic>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "ERC677BridgeTokenRewardableMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677BridgeTokenRewardableMock>;
    deployContract(
      name: "ERC677ReceiverTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC677ReceiverTest>;
    deployContract(
      name: "FeeManagerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerMock>;
    deployContract(
      name: "FeeReceiverMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeReceiverMock>;
    deployContract(
      name: "ForeignAMBWithGasTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBWithGasTokenMock>;
    deployContract(
      name: "GasTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasTokenMock>;
    deployContract(
      name: "IHarnessComptroller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHarnessComptroller>;
    deployContract(
      name: "MessageTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageTest>;
    deployContract(
      name: "MintHandlerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintHandlerMock>;
    deployContract(
      name: "NoReturnTransferTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoReturnTransferTokenMock>;
    deployContract(
      name: "OldBlockReward",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OldBlockReward>;
    deployContract(
      name: "RevertFallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertFallback>;
    deployContract(
      name: "Staking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "UniswapRouterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapRouterMock>;
    deployContract(
      name: "XDaiForeignBridgeMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XDaiForeignBridgeMock>;
    deployContract(
      name: "PermittableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermittableToken>;
    deployContract(
      name: "ReentrancyV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyV2>;
    deployContract(
      name: "TokenOmnibridgeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenOmnibridgeRouter>;
    deployContract(
      name: "IAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAMB>;
    deployContract(
      name: "IBasicAMBMediator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicAMBMediator>;
    deployContract(
      name: "IBasicForeignAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicForeignAMB>;
    deployContract(
      name: "IBasicOmnibridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicOmnibridge>;
    deployContract(
      name: "IBasicOmnibridgeBNB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBasicOmnibridgeBNB>;
    deployContract(
      name: "IBridgeValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeValidators>;
    deployContract(
      name: "IOmnibridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmnibridge>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "OwnableModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableModule>;
    deployContract(
      name: "Sacrifice",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sacrifice>;
    deployContract(
      name: "TransientReentrancy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransientReentrancy>;
    deployContract(
      name: "WETHOmnibridgeRouterV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETHOmnibridgeRouterV2>;
    deployContract(
      name: "UniV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniV2Router02>;
    deployContract(
      name: "EternalStorageProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxy>;
    deployContract(
      name: "OwnedUpgradeabilityProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnedUpgradeabilityProxy>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "UpgradeabilityOwnerStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityOwnerStorage>;
    deployContract(
      name: "UpgradeabilityProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityProxy>;
    deployContract(
      name: "UpgradeabilityStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeabilityStorage>;
    deployContract(
      name: "BasicAMBErc677ToErc677",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMBErc677ToErc677>;
    deployContract(
      name: "ForeignAMBErc677ToErc677",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBErc677ToErc677>;
    deployContract(
      name: "HomeAMBErc677ToErc677",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeAMBErc677ToErc677>;
    deployContract(
      name: "AsyncInformationProcessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsyncInformationProcessor>;
    deployContract(
      name: "BasicAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMB>;
    deployContract(
      name: "BasicForeignAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicForeignAMB>;
    deployContract(
      name: "BasicHomeAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicHomeAMB>;
    deployContract(
      name: "ForeignAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMB>;
    deployContract(
      name: "ForeignAMBWithGasToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignAMBWithGasToken>;
    deployContract(
      name: "HomeAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeAMB>;
    deployContract(
      name: "MessageDelivery",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageDelivery>;
    deployContract(
      name: "MessageProcessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessor>;
    deployContract(
      name: "VersionableAMB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionableAMB>;
    deployContract(
      name: "BaseBridgeValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBridgeValidators>;
    deployContract(
      name: "BaseERC677Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseERC677Bridge>;
    deployContract(
      name: "BaseFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseFeeManager>;
    deployContract(
      name: "BaseOverdrawManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseOverdrawManagement>;
    deployContract(
      name: "BasicAMBMediator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicAMBMediator>;
    deployContract(
      name: "BasicBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicBridge>;
    deployContract(
      name: "BasicForeignBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicForeignBridge>;
    deployContract(
      name: "BasicHomeBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicHomeBridge>;
    deployContract(
      name: "BasicTokenBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicTokenBridge>;
    deployContract(
      name: "BlockRewardFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardFeeManager>;
    deployContract(
      name: "BridgeValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeValidators>;
    deployContract(
      name: "DecimalShiftBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DecimalShiftBridge>;
    deployContract(
      name: "CompoundConnector",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CompoundConnector>;
    deployContract(
      name: "FeeManagerErcToNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerErcToNative>;
    deployContract(
      name: "FeeManagerErcToNativePOSDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManagerErcToNativePOSDAO>;
    deployContract(
      name: "ForeignBridgeErcToNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForeignBridgeErcToNative>;
    deployContract(
      name: "HomeBridgeErcToNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeBridgeErcToNative>;
    deployContract(
      name: "InterestConnector",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestConnector>;
    deployContract(
      name: "RewardableHomeBridgeErcToNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableHomeBridgeErcToNative>;
    deployContract(
      name: "XDaiForeignBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XDaiForeignBridge>;
    deployContract(
      name: "ERC20Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Bridge>;
    deployContract(
      name: "GasTokenConnector",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasTokenConnector>;
    deployContract(
      name: "GSNForeignERC20Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GSNForeignERC20Bridge>;
    deployContract(
      name: "HomeOverdrawManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HomeOverdrawManagement>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "InitializableBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitializableBridge>;
    deployContract(
      name: "InterestReceiverBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverBase>;
    deployContract(
      name: "InterestReceiverStakeBuyback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverStakeBuyback>;
    deployContract(
      name: "InterestReceiverSwapToETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterestReceiverSwapToETH>;
    deployContract(
      name: "MediatorBalanceStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MediatorBalanceStorage>;
    deployContract(
      name: "MessageRelay",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageRelay>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "RewardableBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableBridge>;
    deployContract(
      name: "RewardableValidators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardableValidators>;
    deployContract(
      name: "Sacrifice",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sacrifice>;
    deployContract(
      name: "TokenBridgeMediator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBridgeMediator>;
    deployContract(
      name: "TransferInfoStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferInfoStorage>;
    deployContract(
      name: "Validatable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Validatable>;
    deployContract(
      name: "ValidatorsFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorsFeeManager>;
    deployContract(
      name: "VersionableBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionableBridge>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "BasicToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicToken>;
    deployContract(
      name: "BurnableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BurnableToken>;
    deployContract(
      name: "DetailedERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DetailedERC20>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Basic",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "MintableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableToken>;
    deployContract(
      name: "StandardToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
