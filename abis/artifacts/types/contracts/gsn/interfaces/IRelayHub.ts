/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRelayHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "withdraw"
      | "relayCall"
      | "workerCount"
      | "isRelayManagerStaked"
      | "maximumRecipientDeposit"
      | "balanceOf"
      | "minimumUnstakeDelay"
      | "stakeManager"
      | "registerRelayServer"
      | "gasOverhead"
      | "calculateCharge"
      | "depositFor"
      | "postOverhead"
      | "addRelayWorkers"
      | "penalizer"
      | "workerToManager"
      | "versionHub"
      | "maxWorkerCount"
      | "penalize"
      | "minimumStake"
      | "gasReserve"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RelayServerRegistered"
      | "RelayWorkersAdded"
      | "Withdrawn"
      | "Deposited"
      | "TransactionRejectedByPaymaster"
      | "TransactionRelayed"
      | "TransactionResult"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayCall",
    values: [
      BigNumberish,
      {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "workerCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayManagerStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumRecipientDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumUnstakeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelayServer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gasOverhead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCharge",
    values: [
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postOverhead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayWorkers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "penalizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "workerToManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWorkerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penalize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasReserve",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelayManagerStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumRecipientDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumUnstakeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRelayWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penalizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerToManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWorkerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasReserve", data: BytesLike): Result;
}

export namespace RelayServerRegisteredEvent {
  export type InputTuple = [
    relayManager: AddressLike,
    baseRelayFee: BigNumberish,
    pctRelayFee: BigNumberish,
    relayUrl: string
  ];
  export type OutputTuple = [
    relayManager: string,
    baseRelayFee: bigint,
    pctRelayFee: bigint,
    relayUrl: string
  ];
  export interface OutputObject {
    relayManager: string;
    baseRelayFee: bigint;
    pctRelayFee: bigint;
    relayUrl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayWorkersAddedEvent {
  export type InputTuple = [
    relayManager: AddressLike,
    newRelayWorkers: AddressLike[],
    workersCount: BigNumberish
  ];
  export type OutputTuple = [
    relayManager: string,
    newRelayWorkers: string[],
    workersCount: bigint
  ];
  export interface OutputObject {
    relayManager: string;
    newRelayWorkers: string[];
    workersCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    dest: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, dest: string, amount: bigint];
  export interface OutputObject {
    account: string;
    dest: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    paymaster: AddressLike,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [paymaster: string, from: string, amount: bigint];
  export interface OutputObject {
    paymaster: string;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRejectedByPaymasterEvent {
  export type InputTuple = [
    relayManager: AddressLike,
    paymaster: AddressLike,
    from: AddressLike,
    to: AddressLike,
    relayWorker: AddressLike,
    selector: BytesLike,
    innerGasUsed: BigNumberish,
    reason: BytesLike
  ];
  export type OutputTuple = [
    relayManager: string,
    paymaster: string,
    from: string,
    to: string,
    relayWorker: string,
    selector: string,
    innerGasUsed: bigint,
    reason: string
  ];
  export interface OutputObject {
    relayManager: string;
    paymaster: string;
    from: string;
    to: string;
    relayWorker: string;
    selector: string;
    innerGasUsed: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRelayedEvent {
  export type InputTuple = [
    relayManager: AddressLike,
    relayWorker: AddressLike,
    from: AddressLike,
    to: AddressLike,
    paymaster: AddressLike,
    selector: BytesLike,
    status: BigNumberish,
    charge: BigNumberish
  ];
  export type OutputTuple = [
    relayManager: string,
    relayWorker: string,
    from: string,
    to: string,
    paymaster: string,
    selector: string,
    status: bigint,
    charge: bigint
  ];
  export interface OutputObject {
    relayManager: string;
    relayWorker: string;
    from: string;
    to: string;
    paymaster: string;
    selector: string;
    status: bigint;
    charge: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionResultEvent {
  export type InputTuple = [status: BigNumberish, returnValue: BytesLike];
  export type OutputTuple = [status: bigint, returnValue: string];
  export interface OutputObject {
    status: bigint;
    returnValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRelayHub extends BaseContract {
  connect(runner?: ContractRunner | null): IRelayHub;
  waitForDeployment(): Promise<this>;

  interface: IRelayHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, dest: AddressLike],
    [void],
    "nonpayable"
  >;

  relayCall: TypedContractMethod<
    [
      paymasterMaxAcceptanceBudget: BigNumberish,
      relayRequest: {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish
    ],
    [[boolean, string] & { paymasterAccepted: boolean; returnValue: string }],
    "nonpayable"
  >;

  workerCount: TypedContractMethod<[manager: AddressLike], [bigint], "view">;

  isRelayManagerStaked: TypedContractMethod<
    [relayManager: AddressLike],
    [boolean],
    "view"
  >;

  maximumRecipientDeposit: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[target: AddressLike], [bigint], "view">;

  minimumUnstakeDelay: TypedContractMethod<[], [bigint], "view">;

  stakeManager: TypedContractMethod<[], [string], "view">;

  registerRelayServer: TypedContractMethod<
    [baseRelayFee: BigNumberish, pctRelayFee: BigNumberish, url: string],
    [void],
    "nonpayable"
  >;

  gasOverhead: TypedContractMethod<[], [bigint], "view">;

  calculateCharge: TypedContractMethod<
    [
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ],
    [bigint],
    "view"
  >;

  depositFor: TypedContractMethod<[target: AddressLike], [void], "payable">;

  postOverhead: TypedContractMethod<[], [bigint], "view">;

  addRelayWorkers: TypedContractMethod<
    [newRelayWorkers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  penalizer: TypedContractMethod<[], [string], "view">;

  workerToManager: TypedContractMethod<[worker: AddressLike], [string], "view">;

  versionHub: TypedContractMethod<[], [string], "view">;

  maxWorkerCount: TypedContractMethod<[], [bigint], "view">;

  penalize: TypedContractMethod<
    [relayWorker: AddressLike, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  minimumStake: TypedContractMethod<[], [bigint], "view">;

  gasReserve: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, dest: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relayCall"
  ): TypedContractMethod<
    [
      paymasterMaxAcceptanceBudget: BigNumberish,
      relayRequest: {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish
    ],
    [[boolean, string] & { paymasterAccepted: boolean; returnValue: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "workerCount"
  ): TypedContractMethod<[manager: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRelayManagerStaked"
  ): TypedContractMethod<[relayManager: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maximumRecipientDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[target: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumUnstakeDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerRelayServer"
  ): TypedContractMethod<
    [baseRelayFee: BigNumberish, pctRelayFee: BigNumberish, url: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasOverhead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCharge"
  ): TypedContractMethod<
    [
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<[target: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "postOverhead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addRelayWorkers"
  ): TypedContractMethod<
    [newRelayWorkers: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "penalizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "workerToManager"
  ): TypedContractMethod<[worker: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "versionHub"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxWorkerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "penalize"
  ): TypedContractMethod<
    [relayWorker: AddressLike, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minimumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasReserve"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RelayServerRegistered"
  ): TypedContractEvent<
    RelayServerRegisteredEvent.InputTuple,
    RelayServerRegisteredEvent.OutputTuple,
    RelayServerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RelayWorkersAdded"
  ): TypedContractEvent<
    RelayWorkersAddedEvent.InputTuple,
    RelayWorkersAddedEvent.OutputTuple,
    RelayWorkersAddedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRejectedByPaymaster"
  ): TypedContractEvent<
    TransactionRejectedByPaymasterEvent.InputTuple,
    TransactionRejectedByPaymasterEvent.OutputTuple,
    TransactionRejectedByPaymasterEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRelayed"
  ): TypedContractEvent<
    TransactionRelayedEvent.InputTuple,
    TransactionRelayedEvent.OutputTuple,
    TransactionRelayedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionResult"
  ): TypedContractEvent<
    TransactionResultEvent.InputTuple,
    TransactionResultEvent.OutputTuple,
    TransactionResultEvent.OutputObject
  >;

  filters: {
    "RelayServerRegistered(address,uint256,uint256,string)": TypedContractEvent<
      RelayServerRegisteredEvent.InputTuple,
      RelayServerRegisteredEvent.OutputTuple,
      RelayServerRegisteredEvent.OutputObject
    >;
    RelayServerRegistered: TypedContractEvent<
      RelayServerRegisteredEvent.InputTuple,
      RelayServerRegisteredEvent.OutputTuple,
      RelayServerRegisteredEvent.OutputObject
    >;

    "RelayWorkersAdded(address,address[],uint256)": TypedContractEvent<
      RelayWorkersAddedEvent.InputTuple,
      RelayWorkersAddedEvent.OutputTuple,
      RelayWorkersAddedEvent.OutputObject
    >;
    RelayWorkersAdded: TypedContractEvent<
      RelayWorkersAddedEvent.InputTuple,
      RelayWorkersAddedEvent.OutputTuple,
      RelayWorkersAddedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "Deposited(address,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "TransactionRejectedByPaymaster(address,address,address,address,address,bytes4,uint256,bytes)": TypedContractEvent<
      TransactionRejectedByPaymasterEvent.InputTuple,
      TransactionRejectedByPaymasterEvent.OutputTuple,
      TransactionRejectedByPaymasterEvent.OutputObject
    >;
    TransactionRejectedByPaymaster: TypedContractEvent<
      TransactionRejectedByPaymasterEvent.InputTuple,
      TransactionRejectedByPaymasterEvent.OutputTuple,
      TransactionRejectedByPaymasterEvent.OutputObject
    >;

    "TransactionRelayed(address,address,address,address,address,bytes4,uint8,uint256)": TypedContractEvent<
      TransactionRelayedEvent.InputTuple,
      TransactionRelayedEvent.OutputTuple,
      TransactionRelayedEvent.OutputObject
    >;
    TransactionRelayed: TypedContractEvent<
      TransactionRelayedEvent.InputTuple,
      TransactionRelayedEvent.OutputTuple,
      TransactionRelayedEvent.OutputObject
    >;

    "TransactionResult(uint8,bytes)": TypedContractEvent<
      TransactionResultEvent.InputTuple,
      TransactionResultEvent.OutputTuple,
      TransactionResultEvent.OutputObject
    >;
    TransactionResult: TypedContractEvent<
      TransactionResultEvent.InputTuple,
      TransactionResultEvent.OutputTuple,
      TransactionResultEvent.OutputObject
    >;
  };
}
