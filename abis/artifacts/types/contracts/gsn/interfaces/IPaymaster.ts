/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPaymasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "preRelayedCall"
      | "getRelayHubDeposit"
      | "getHubAddr"
      | "postRelayedCall"
      | "trustedForwarder"
      | "versionPaymaster"
      | "getGasAndDataLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [
      {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [
      BytesLike,
      boolean,
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasAndDataLimits",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasAndDataLimits",
    data: BytesLike
  ): Result;
}

export interface IPaymaster extends BaseContract {
  connect(runner?: ContractRunner | null): IPaymaster;
  waitForDeployment(): Promise<this>;

  interface: IPaymasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  preRelayedCall: TypedContractMethod<
    [
      relayRequest: {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish
    ],
    [[string, boolean] & { context: string; rejectOnRecipientRevert: boolean }],
    "nonpayable"
  >;

  getRelayHubDeposit: TypedContractMethod<[], [bigint], "view">;

  getHubAddr: TypedContractMethod<[], [string], "view">;

  postRelayedCall: TypedContractMethod<
    [
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ],
    [void],
    "nonpayable"
  >;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  versionPaymaster: TypedContractMethod<[], [string], "view">;

  getGasAndDataLimits: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        acceptanceBudget: bigint;
        preRelayedCallGasLimit: bigint;
        postRelayedCallGasLimit: bigint;
        calldataSizeLimit: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "preRelayedCall"
  ): TypedContractMethod<
    [
      relayRequest: {
        request: {
          from: AddressLike;
          to: AddressLike;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
          validUntil: BigNumberish;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: AddressLike;
          paymaster: AddressLike;
          forwarder: AddressLike;
          paymasterData: BytesLike;
          clientId: BigNumberish;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish
    ],
    [[string, boolean] & { context: string; rejectOnRecipientRevert: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRelayHubDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHubAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postRelayedCall"
  ): TypedContractMethod<
    [
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: AddressLike;
        paymaster: AddressLike;
        forwarder: AddressLike;
        paymasterData: BytesLike;
        clientId: BigNumberish;
      }
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "versionPaymaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGasAndDataLimits"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        acceptanceBudget: bigint;
        preRelayedCallGasLimit: bigint;
        postRelayedCallGasLimit: bigint;
        calldataSizeLimit: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
