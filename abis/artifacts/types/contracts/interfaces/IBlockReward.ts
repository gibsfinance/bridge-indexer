/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBlockRewardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgesAllowedLength"
      | "addBridgeNativeRewardReceivers"
      | "blockRewardContractId"
      | "mintedTotally"
      | "addBridgeTokenRewardReceivers"
      | "addExtraReceiver"
      | "mintedTotallyByBridge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgesAllowedLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeNativeRewardReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockRewardContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTotally",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeTokenRewardReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addExtraReceiver",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTotallyByBridge",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgesAllowedLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeNativeRewardReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockRewardContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTotally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeTokenRewardReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExtraReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTotallyByBridge",
    data: BytesLike
  ): Result;
}

export interface IBlockReward extends BaseContract {
  connect(runner?: ContractRunner | null): IBlockReward;
  waitForDeployment(): Promise<this>;

  interface: IBlockRewardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgesAllowedLength: TypedContractMethod<[], [bigint], "view">;

  addBridgeNativeRewardReceivers: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  blockRewardContractId: TypedContractMethod<[], [string], "view">;

  mintedTotally: TypedContractMethod<[], [bigint], "view">;

  addBridgeTokenRewardReceivers: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addExtraReceiver: TypedContractMethod<
    [_amount: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  mintedTotallyByBridge: TypedContractMethod<
    [_bridge: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgesAllowedLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addBridgeNativeRewardReceivers"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blockRewardContractId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintedTotally"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addBridgeTokenRewardReceivers"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addExtraReceiver"
  ): TypedContractMethod<
    [_amount: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintedTotallyByBridge"
  ): TypedContractMethod<[_bridge: AddressLike], [bigint], "view">;

  filters: {};
}
