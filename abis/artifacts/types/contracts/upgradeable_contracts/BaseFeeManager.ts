/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BaseFeeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "distributeFeeFromAffirmation"
      | "setForeignFee"
      | "setHomeFee"
      | "distributeFeeFromSignatures"
      | "getHomeFee"
      | "calculateFee"
      | "getFeeManagerMode"
      | "getForeignFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HomeFeeUpdated" | "ForeignFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "distributeFeeFromAffirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForeignFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHomeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFeeFromSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHomeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeManagerMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForeignFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeFeeFromAffirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForeignFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHomeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFeeFromSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHomeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeManagerMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForeignFee",
    data: BytesLike
  ): Result;
}

export namespace HomeFeeUpdatedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForeignFeeUpdatedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseFeeManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseFeeManager;
  waitForDeployment(): Promise<this>;

  interface: BaseFeeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeFeeFromAffirmation: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForeignFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHomeFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  distributeFeeFromSignatures: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHomeFee: TypedContractMethod<[], [bigint], "view">;

  calculateFee: TypedContractMethod<
    [_value: BigNumberish, _recover: boolean, _feeType: BytesLike],
    [bigint],
    "view"
  >;

  getFeeManagerMode: TypedContractMethod<[], [string], "view">;

  getForeignFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeFeeFromAffirmation"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForeignFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHomeFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeFeeFromSignatures"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHomeFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [_value: BigNumberish, _recover: boolean, _feeType: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeManagerMode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getForeignFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "HomeFeeUpdated"
  ): TypedContractEvent<
    HomeFeeUpdatedEvent.InputTuple,
    HomeFeeUpdatedEvent.OutputTuple,
    HomeFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ForeignFeeUpdated"
  ): TypedContractEvent<
    ForeignFeeUpdatedEvent.InputTuple,
    ForeignFeeUpdatedEvent.OutputTuple,
    ForeignFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "HomeFeeUpdated(uint256)": TypedContractEvent<
      HomeFeeUpdatedEvent.InputTuple,
      HomeFeeUpdatedEvent.OutputTuple,
      HomeFeeUpdatedEvent.OutputObject
    >;
    HomeFeeUpdated: TypedContractEvent<
      HomeFeeUpdatedEvent.InputTuple,
      HomeFeeUpdatedEvent.OutputTuple,
      HomeFeeUpdatedEvent.OutputObject
    >;

    "ForeignFeeUpdated(uint256)": TypedContractEvent<
      ForeignFeeUpdatedEvent.InputTuple,
      ForeignFeeUpdatedEvent.OutputTuple,
      ForeignFeeUpdatedEvent.OutputObject
    >;
    ForeignFeeUpdated: TypedContractEvent<
      ForeignFeeUpdatedEvent.InputTuple,
      ForeignFeeUpdatedEvent.OutputTuple,
      ForeignFeeUpdatedEvent.OutputObject
    >;
  };
}
