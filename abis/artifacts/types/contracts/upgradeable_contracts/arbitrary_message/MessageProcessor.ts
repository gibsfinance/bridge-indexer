/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MessageProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "transactionHash"
      | "failedMessageReceiver"
      | "failedMessageSender"
      | "messageId"
      | "messageSourceChainId"
      | "messageCallStatus"
      | "messageSender"
      | "failedMessageDataHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "transactionHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageReceiver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageSender",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageSourceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageCallStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessageDataHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "transactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageSourceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageCallStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessageDataHash",
    data: BytesLike
  ): Result;
}

export interface MessageProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): MessageProcessor;
  waitForDeployment(): Promise<this>;

  interface: MessageProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  transactionHash: TypedContractMethod<[], [string], "view">;

  failedMessageReceiver: TypedContractMethod<
    [_messageId: BytesLike],
    [string],
    "view"
  >;

  failedMessageSender: TypedContractMethod<
    [_messageId: BytesLike],
    [string],
    "view"
  >;

  messageId: TypedContractMethod<[], [string], "view">;

  messageSourceChainId: TypedContractMethod<[], [bigint], "view">;

  messageCallStatus: TypedContractMethod<
    [_messageId: BytesLike],
    [boolean],
    "view"
  >;

  messageSender: TypedContractMethod<[], [string], "view">;

  failedMessageDataHash: TypedContractMethod<
    [_messageId: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "transactionHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "failedMessageReceiver"
  ): TypedContractMethod<[_messageId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "failedMessageSender"
  ): TypedContractMethod<[_messageId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "messageId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageSourceChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "messageCallStatus"
  ): TypedContractMethod<[_messageId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "failedMessageDataHash"
  ): TypedContractMethod<[_messageId: BytesLike], [string], "view">;

  filters: {};
}
