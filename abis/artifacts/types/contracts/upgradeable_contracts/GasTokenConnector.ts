/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GasTokenConnectorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setGasTokenTargetMintValue"
      | "gasTokenReceiver"
      | "owner"
      | "setGasTokenReceiver"
      | "gasToken"
      | "gasTokenTargetMintValue"
      | "setGasTokenParameters"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "setGasTokenTargetMintValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasTokenReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGasTokenReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gasToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasTokenTargetMintValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasTokenParameters",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "setGasTokenTargetMintValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasTokenReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasTokenReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasTokenTargetMintValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasTokenParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GasTokenConnector extends BaseContract {
  connect(runner?: ContractRunner | null): GasTokenConnector;
  waitForDeployment(): Promise<this>;

  interface: GasTokenConnectorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setGasTokenTargetMintValue: TypedContractMethod<
    [_targetMintValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  gasTokenReceiver: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setGasTokenReceiver: TypedContractMethod<
    [_receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  gasToken: TypedContractMethod<[], [string], "view">;

  gasTokenTargetMintValue: TypedContractMethod<[], [bigint], "view">;

  setGasTokenParameters: TypedContractMethod<
    [_targetMintValue: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setGasTokenTargetMintValue"
  ): TypedContractMethod<
    [_targetMintValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasTokenReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGasTokenReceiver"
  ): TypedContractMethod<[_receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gasToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasTokenTargetMintValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setGasTokenParameters"
  ): TypedContractMethod<
    [_targetMintValue: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
