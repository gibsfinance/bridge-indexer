/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface RewardableHomeBridgeErcToNativeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setForeignFee"
      | "setHomeFee"
      | "setFeeManagerContract"
      | "owner"
      | "getAmountToBurn"
      | "getHomeFee"
      | "feeManagerContract"
      | "getFeeManagerMode"
      | "transferOwnership"
      | "getForeignFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeDistributedFromAffirmation"
      | "FeeDistributedFromSignatures"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "setForeignFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHomeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManagerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountToBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHomeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManagerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeManagerMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getForeignFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "setForeignFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHomeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHomeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeManagerMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForeignFee",
    data: BytesLike
  ): Result;
}

export namespace FeeDistributedFromAffirmationEvent {
  export type InputTuple = [
    feeAmount: BigNumberish,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [feeAmount: bigint, transactionHash: string];
  export interface OutputObject {
    feeAmount: bigint;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDistributedFromSignaturesEvent {
  export type InputTuple = [
    feeAmount: BigNumberish,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [feeAmount: bigint, transactionHash: string];
  export interface OutputObject {
    feeAmount: bigint;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardableHomeBridgeErcToNative extends BaseContract {
  connect(runner?: ContractRunner | null): RewardableHomeBridgeErcToNative;
  waitForDeployment(): Promise<this>;

  interface: RewardableHomeBridgeErcToNativeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setForeignFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHomeFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setFeeManagerContract: TypedContractMethod<
    [_feeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getAmountToBurn: TypedContractMethod<
    [_value: BigNumberish],
    [bigint],
    "view"
  >;

  getHomeFee: TypedContractMethod<[], [bigint], "view">;

  feeManagerContract: TypedContractMethod<[], [string], "view">;

  getFeeManagerMode: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getForeignFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setForeignFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHomeFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeManagerContract"
  ): TypedContractMethod<[_feeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAmountToBurn"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHomeFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeManagerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeManagerMode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getForeignFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FeeDistributedFromAffirmation"
  ): TypedContractEvent<
    FeeDistributedFromAffirmationEvent.InputTuple,
    FeeDistributedFromAffirmationEvent.OutputTuple,
    FeeDistributedFromAffirmationEvent.OutputObject
  >;
  getEvent(
    key: "FeeDistributedFromSignatures"
  ): TypedContractEvent<
    FeeDistributedFromSignaturesEvent.InputTuple,
    FeeDistributedFromSignaturesEvent.OutputTuple,
    FeeDistributedFromSignaturesEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FeeDistributedFromAffirmation(uint256,bytes32)": TypedContractEvent<
      FeeDistributedFromAffirmationEvent.InputTuple,
      FeeDistributedFromAffirmationEvent.OutputTuple,
      FeeDistributedFromAffirmationEvent.OutputObject
    >;
    FeeDistributedFromAffirmation: TypedContractEvent<
      FeeDistributedFromAffirmationEvent.InputTuple,
      FeeDistributedFromAffirmationEvent.OutputTuple,
      FeeDistributedFromAffirmationEvent.OutputObject
    >;

    "FeeDistributedFromSignatures(uint256,bytes32)": TypedContractEvent<
      FeeDistributedFromSignaturesEvent.InputTuple,
      FeeDistributedFromSignaturesEvent.OutputTuple,
      FeeDistributedFromSignaturesEvent.OutputObject
    >;
    FeeDistributedFromSignatures: TypedContractEvent<
      FeeDistributedFromSignaturesEvent.InputTuple,
      FeeDistributedFromSignaturesEvent.OutputTuple,
      FeeDistributedFromSignaturesEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
