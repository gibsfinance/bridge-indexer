/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface HomeAMBErc677ToErc677Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "relayTokens"
      | "fixFailedMessage"
      | "setBridgeContract"
      | "erc677token"
      | "totalSpentPerDay"
      | "isInitialized"
      | "setExecutionDailyLimit"
      | "getCurrentDay"
      | "getBridgeMode"
      | "executionDailyLimit"
      | "totalExecutedPerDay"
      | "messageFixed"
      | "dailyLimit"
      | "claimTokens"
      | "setMediatorContractOnOtherSide"
      | "mediatorContractOnOtherSide"
      | "withinExecutionLimit"
      | "executionMaxPerTx"
      | "handleBridgedTokens"
      | "owner"
      | "maxAvailablePerTx"
      | "requestFailedMessageFix"
      | "getBridgeInterfacesVersion"
      | "outOfLimitAmount"
      | "setMinPerTx"
      | "onTokenTransfer"
      | "fixAssetsAboveLimits"
      | "setDailyLimit"
      | "requestGasLimit"
      | "initialize"
      | "setMaxPerTx"
      | "bridgeContract"
      | "decimalShift"
      | "minPerTx"
      | "withinLimit"
      | "setExecutionMaxPerTx"
      | "transferOwnership"
      | "setRequestGasLimit"
      | "maxPerTx"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FailedMessageFixed"
      | "TokensBridgingInitiated"
      | "TokensBridged"
      | "DailyLimitChanged"
      | "ExecutionDailyLimitChanged"
      | "OwnershipTransferred"
      | "MediatorAmountLimitExceeded"
      | "AmountLimitExceeded"
      | "AssetAboveLimitsFixed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "relayTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixFailedMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "erc677token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSpentPerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionDailyLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionDailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutedPerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageFixed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMediatorContractOnOtherSide",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mediatorContractOnOtherSide",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withinExecutionLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionMaxPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleBridgedTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxAvailablePerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFailedMessageFix",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeInterfacesVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outOfLimitAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPerTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fixAssetsAboveLimits",
    values: [BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalShift",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPerTx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withinLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionMaxPerTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxPerTx", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "relayTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixFailedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc677token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSpentPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutedPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMediatorContractOnOtherSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediatorContractOnOtherSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withinExecutionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleBridgedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAvailablePerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFailedMessageFix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeInterfacesVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outOfLimitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixAssetsAboveLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minPerTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPerTx", data: BytesLike): Result;
}

export namespace FailedMessageFixedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    recipient: string,
    value: bigint
  ];
  export interface OutputObject {
    messageId: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBridgingInitiatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    value: BigNumberish,
    messageId: BytesLike
  ];
  export type OutputTuple = [sender: string, value: bigint, messageId: string];
  export interface OutputObject {
    sender: string;
    value: bigint;
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBridgedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    value: BigNumberish,
    messageId: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    value: bigint,
    messageId: string
  ];
  export interface OutputObject {
    recipient: string;
    value: bigint;
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyLimitChangedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionDailyLimitChangedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MediatorAmountLimitExceededEvent {
  export type InputTuple = [
    recipient: AddressLike,
    value: BigNumberish,
    messageId: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    value: bigint,
    messageId: string
  ];
  export interface OutputObject {
    recipient: string;
    value: bigint;
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AmountLimitExceededEvent {
  export type InputTuple = [
    recipient: AddressLike,
    value: BigNumberish,
    transactionHash: BytesLike,
    messageId: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    value: bigint,
    transactionHash: string,
    messageId: string
  ];
  export interface OutputObject {
    recipient: string;
    value: bigint;
    transactionHash: string;
    messageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetAboveLimitsFixedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    value: BigNumberish,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    value: bigint,
    remaining: bigint
  ];
  export interface OutputObject {
    messageId: string;
    value: bigint;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HomeAMBErc677ToErc677 extends BaseContract {
  connect(runner?: ContractRunner | null): HomeAMBErc677ToErc677;
  waitForDeployment(): Promise<this>;

  interface: HomeAMBErc677ToErc677Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  relayTokens: TypedContractMethod<
    [_receiver: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  fixFailedMessage: TypedContractMethod<
    [_messageId: BytesLike],
    [void],
    "nonpayable"
  >;

  setBridgeContract: TypedContractMethod<
    [_bridgeContract: AddressLike],
    [void],
    "nonpayable"
  >;

  erc677token: TypedContractMethod<[], [string], "view">;

  totalSpentPerDay: TypedContractMethod<[_day: BigNumberish], [bigint], "view">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  setExecutionDailyLimit: TypedContractMethod<
    [_dailyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentDay: TypedContractMethod<[], [bigint], "view">;

  getBridgeMode: TypedContractMethod<[], [string], "view">;

  executionDailyLimit: TypedContractMethod<[], [bigint], "view">;

  totalExecutedPerDay: TypedContractMethod<
    [_day: BigNumberish],
    [bigint],
    "view"
  >;

  messageFixed: TypedContractMethod<[_messageId: BytesLike], [boolean], "view">;

  dailyLimit: TypedContractMethod<[], [bigint], "view">;

  claimTokens: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  setMediatorContractOnOtherSide: TypedContractMethod<
    [_mediatorContract: AddressLike],
    [void],
    "nonpayable"
  >;

  mediatorContractOnOtherSide: TypedContractMethod<[], [string], "view">;

  withinExecutionLimit: TypedContractMethod<
    [_amount: BigNumberish],
    [boolean],
    "view"
  >;

  executionMaxPerTx: TypedContractMethod<[], [bigint], "view">;

  handleBridgedTokens: TypedContractMethod<
    [_recipient: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  maxAvailablePerTx: TypedContractMethod<[], [bigint], "view">;

  requestFailedMessageFix: TypedContractMethod<
    [_messageId: BytesLike],
    [void],
    "nonpayable"
  >;

  getBridgeInterfacesVersion: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { major: bigint; minor: bigint; patch: bigint }
    ],
    "view"
  >;

  outOfLimitAmount: TypedContractMethod<[], [bigint], "view">;

  setMinPerTx: TypedContractMethod<
    [_minPerTx: BigNumberish],
    [void],
    "nonpayable"
  >;

  onTokenTransfer: TypedContractMethod<
    [_from: AddressLike, _value: BigNumberish, _data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  fixAssetsAboveLimits: TypedContractMethod<
    [
      messageId: BytesLike,
      unlockOnOtherSide: boolean,
      valueToUnlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDailyLimit: TypedContractMethod<
    [_dailyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestGasLimit: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _bridgeContract: AddressLike,
      _mediatorContract: AddressLike,
      _erc677token: AddressLike,
      _dailyLimitMaxPerTxMinPerTxArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [BigNumberish, BigNumberish],
      _requestGasLimit: BigNumberish,
      _decimalShift: BigNumberish,
      _owner: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  setMaxPerTx: TypedContractMethod<
    [_maxPerTx: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgeContract: TypedContractMethod<[], [string], "view">;

  decimalShift: TypedContractMethod<[], [bigint], "view">;

  minPerTx: TypedContractMethod<[], [bigint], "view">;

  withinLimit: TypedContractMethod<[_amount: BigNumberish], [boolean], "view">;

  setExecutionMaxPerTx: TypedContractMethod<
    [_maxPerTx: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setRequestGasLimit: TypedContractMethod<
    [_requestGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  maxPerTx: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "relayTokens"
  ): TypedContractMethod<
    [_receiver: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fixFailedMessage"
  ): TypedContractMethod<[_messageId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBridgeContract"
  ): TypedContractMethod<[_bridgeContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "erc677token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSpentPerDay"
  ): TypedContractMethod<[_day: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setExecutionDailyLimit"
  ): TypedContractMethod<[_dailyLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBridgeMode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executionDailyLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalExecutedPerDay"
  ): TypedContractMethod<[_day: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "messageFixed"
  ): TypedContractMethod<[_messageId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dailyLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMediatorContractOnOtherSide"
  ): TypedContractMethod<
    [_mediatorContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediatorContractOnOtherSide"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withinExecutionLimit"
  ): TypedContractMethod<[_amount: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "executionMaxPerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleBridgedTokens"
  ): TypedContractMethod<
    [_recipient: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxAvailablePerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestFailedMessageFix"
  ): TypedContractMethod<[_messageId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBridgeInterfacesVersion"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { major: bigint; minor: bigint; patch: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "outOfLimitAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setMinPerTx"
  ): TypedContractMethod<[_minPerTx: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onTokenTransfer"
  ): TypedContractMethod<
    [_from: AddressLike, _value: BigNumberish, _data: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fixAssetsAboveLimits"
  ): TypedContractMethod<
    [
      messageId: BytesLike,
      unlockOnOtherSide: boolean,
      valueToUnlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDailyLimit"
  ): TypedContractMethod<[_dailyLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _bridgeContract: AddressLike,
      _mediatorContract: AddressLike,
      _erc677token: AddressLike,
      _dailyLimitMaxPerTxMinPerTxArray: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [BigNumberish, BigNumberish],
      _requestGasLimit: BigNumberish,
      _decimalShift: BigNumberish,
      _owner: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxPerTx"
  ): TypedContractMethod<[_maxPerTx: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bridgeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimalShift"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withinLimit"
  ): TypedContractMethod<[_amount: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setExecutionMaxPerTx"
  ): TypedContractMethod<[_maxPerTx: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRequestGasLimit"
  ): TypedContractMethod<
    [_requestGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxPerTx"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FailedMessageFixed"
  ): TypedContractEvent<
    FailedMessageFixedEvent.InputTuple,
    FailedMessageFixedEvent.OutputTuple,
    FailedMessageFixedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBridgingInitiated"
  ): TypedContractEvent<
    TokensBridgingInitiatedEvent.InputTuple,
    TokensBridgingInitiatedEvent.OutputTuple,
    TokensBridgingInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBridged"
  ): TypedContractEvent<
    TokensBridgedEvent.InputTuple,
    TokensBridgedEvent.OutputTuple,
    TokensBridgedEvent.OutputObject
  >;
  getEvent(
    key: "DailyLimitChanged"
  ): TypedContractEvent<
    DailyLimitChangedEvent.InputTuple,
    DailyLimitChangedEvent.OutputTuple,
    DailyLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionDailyLimitChanged"
  ): TypedContractEvent<
    ExecutionDailyLimitChangedEvent.InputTuple,
    ExecutionDailyLimitChangedEvent.OutputTuple,
    ExecutionDailyLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "MediatorAmountLimitExceeded"
  ): TypedContractEvent<
    MediatorAmountLimitExceededEvent.InputTuple,
    MediatorAmountLimitExceededEvent.OutputTuple,
    MediatorAmountLimitExceededEvent.OutputObject
  >;
  getEvent(
    key: "AmountLimitExceeded"
  ): TypedContractEvent<
    AmountLimitExceededEvent.InputTuple,
    AmountLimitExceededEvent.OutputTuple,
    AmountLimitExceededEvent.OutputObject
  >;
  getEvent(
    key: "AssetAboveLimitsFixed"
  ): TypedContractEvent<
    AssetAboveLimitsFixedEvent.InputTuple,
    AssetAboveLimitsFixedEvent.OutputTuple,
    AssetAboveLimitsFixedEvent.OutputObject
  >;

  filters: {
    "FailedMessageFixed(bytes32,address,uint256)": TypedContractEvent<
      FailedMessageFixedEvent.InputTuple,
      FailedMessageFixedEvent.OutputTuple,
      FailedMessageFixedEvent.OutputObject
    >;
    FailedMessageFixed: TypedContractEvent<
      FailedMessageFixedEvent.InputTuple,
      FailedMessageFixedEvent.OutputTuple,
      FailedMessageFixedEvent.OutputObject
    >;

    "TokensBridgingInitiated(address,uint256,bytes32)": TypedContractEvent<
      TokensBridgingInitiatedEvent.InputTuple,
      TokensBridgingInitiatedEvent.OutputTuple,
      TokensBridgingInitiatedEvent.OutputObject
    >;
    TokensBridgingInitiated: TypedContractEvent<
      TokensBridgingInitiatedEvent.InputTuple,
      TokensBridgingInitiatedEvent.OutputTuple,
      TokensBridgingInitiatedEvent.OutputObject
    >;

    "TokensBridged(address,uint256,bytes32)": TypedContractEvent<
      TokensBridgedEvent.InputTuple,
      TokensBridgedEvent.OutputTuple,
      TokensBridgedEvent.OutputObject
    >;
    TokensBridged: TypedContractEvent<
      TokensBridgedEvent.InputTuple,
      TokensBridgedEvent.OutputTuple,
      TokensBridgedEvent.OutputObject
    >;

    "DailyLimitChanged(uint256)": TypedContractEvent<
      DailyLimitChangedEvent.InputTuple,
      DailyLimitChangedEvent.OutputTuple,
      DailyLimitChangedEvent.OutputObject
    >;
    DailyLimitChanged: TypedContractEvent<
      DailyLimitChangedEvent.InputTuple,
      DailyLimitChangedEvent.OutputTuple,
      DailyLimitChangedEvent.OutputObject
    >;

    "ExecutionDailyLimitChanged(uint256)": TypedContractEvent<
      ExecutionDailyLimitChangedEvent.InputTuple,
      ExecutionDailyLimitChangedEvent.OutputTuple,
      ExecutionDailyLimitChangedEvent.OutputObject
    >;
    ExecutionDailyLimitChanged: TypedContractEvent<
      ExecutionDailyLimitChangedEvent.InputTuple,
      ExecutionDailyLimitChangedEvent.OutputTuple,
      ExecutionDailyLimitChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "MediatorAmountLimitExceeded(address,uint256,bytes32)": TypedContractEvent<
      MediatorAmountLimitExceededEvent.InputTuple,
      MediatorAmountLimitExceededEvent.OutputTuple,
      MediatorAmountLimitExceededEvent.OutputObject
    >;
    MediatorAmountLimitExceeded: TypedContractEvent<
      MediatorAmountLimitExceededEvent.InputTuple,
      MediatorAmountLimitExceededEvent.OutputTuple,
      MediatorAmountLimitExceededEvent.OutputObject
    >;

    "AmountLimitExceeded(address,uint256,bytes32,bytes32)": TypedContractEvent<
      AmountLimitExceededEvent.InputTuple,
      AmountLimitExceededEvent.OutputTuple,
      AmountLimitExceededEvent.OutputObject
    >;
    AmountLimitExceeded: TypedContractEvent<
      AmountLimitExceededEvent.InputTuple,
      AmountLimitExceededEvent.OutputTuple,
      AmountLimitExceededEvent.OutputObject
    >;

    "AssetAboveLimitsFixed(bytes32,uint256,uint256)": TypedContractEvent<
      AssetAboveLimitsFixedEvent.InputTuple,
      AssetAboveLimitsFixedEvent.OutputTuple,
      AssetAboveLimitsFixedEvent.OutputObject
    >;
    AssetAboveLimitsFixed: TypedContractEvent<
      AssetAboveLimitsFixedEvent.InputTuple,
      AssetAboveLimitsFixedEvent.OutputTuple,
      AssetAboveLimitsFixedEvent.OutputObject
    >;
  };
}
