/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface WETHOmnibridgeRouterV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "RUNNER_SLOT"
      | "WETH"
      | "bridge"
      | "claimTokens"
      | "isValidator"
      | "onTokenBridged"
      | "owner"
      | "relayTokensAndCall"
      | "safeExecuteSignaturesWithAutoGasLimit"
      | "setValidatorStatus"
      | "setValidatorsFilter"
      | "transferOwnership"
      | "validatorsFilter"
      | "wrapAndRelayTokens()"
      | "wrapAndRelayTokens(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RUNNER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenBridged",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayTokensAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeExecuteSignaturesWithAutoGasLimit",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorsFilter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorsFilter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapAndRelayTokens()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapAndRelayTokens(address)",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "RUNNER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenBridged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayTokensAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeExecuteSignaturesWithAutoGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorsFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorsFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndRelayTokens()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndRelayTokens(address)",
    data: BytesLike
  ): Result;
}

export interface WETHOmnibridgeRouterV2 extends BaseContract {
  connect(runner?: ContractRunner | null): WETHOmnibridgeRouterV2;
  waitForDeployment(): Promise<this>;

  interface: WETHOmnibridgeRouterV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RUNNER_SLOT: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  bridge: TypedContractMethod<[], [string], "view">;

  claimTokens: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  isValidator: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  onTokenBridged: TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  relayTokensAndCall: TypedContractMethod<
    [_receiver: AddressLike, _data: BytesLike],
    [void],
    "payable"
  >;

  safeExecuteSignaturesWithAutoGasLimit: TypedContractMethod<
    [runner: AddressLike, _data: BytesLike, _signatures: BytesLike],
    [void],
    "payable"
  >;

  setValidatorStatus: TypedContractMethod<
    [_validator: AddressLike, _isValidator: boolean],
    [void],
    "payable"
  >;

  setValidatorsFilter: TypedContractMethod<
    [_validatorsFilter: AddressLike],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validatorsFilter: TypedContractMethod<[], [string], "view">;

  "wrapAndRelayTokens()": TypedContractMethod<[], [void], "payable">;

  "wrapAndRelayTokens(address)": TypedContractMethod<
    [_receiver: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RUNNER_SLOT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onTokenBridged"
  ): TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayTokensAndCall"
  ): TypedContractMethod<
    [_receiver: AddressLike, _data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeExecuteSignaturesWithAutoGasLimit"
  ): TypedContractMethod<
    [runner: AddressLike, _data: BytesLike, _signatures: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setValidatorStatus"
  ): TypedContractMethod<
    [_validator: AddressLike, _isValidator: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setValidatorsFilter"
  ): TypedContractMethod<[_validatorsFilter: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorsFilter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrapAndRelayTokens()"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "wrapAndRelayTokens(address)"
  ): TypedContractMethod<[_receiver: AddressLike], [void], "payable">;

  filters: {};
}
