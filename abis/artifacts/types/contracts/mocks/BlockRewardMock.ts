/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BlockRewardMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setToken"
      | "mintedCoins"
      | "addBridgeNativeRewardReceivers"
      | "validatorRewardList"
      | "blockRewardContractId"
      | "setValidatorsRewards"
      | "mintedTotally"
      | "addBridgeTokenRewardReceivers"
      | "feeAmount"
      | "addExtraReceiver"
      | "validatorList"
      | "mintedTotallyByBridge"
      | "random"
      | "addMintedTotallyByBridge"
      | "bridgeTokenReward"
      | "token"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BridgeTokenRewardAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeNativeRewardReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRewardList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockRewardContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorsRewards",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTotally",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeTokenRewardReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addExtraReceiver",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTotallyByBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "random",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMintedTotallyByBridge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeTokenReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeNativeRewardReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorRewardList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockRewardContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorsRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTotally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeTokenRewardReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExtraReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTotallyByBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "random", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMintedTotallyByBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeTokenReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace BridgeTokenRewardAddedEvent {
  export type InputTuple = [
    amount: BigNumberish,
    cumulativeAmount: BigNumberish,
    bridge: AddressLike
  ];
  export type OutputTuple = [
    amount: bigint,
    cumulativeAmount: bigint,
    bridge: string
  ];
  export interface OutputObject {
    amount: bigint;
    cumulativeAmount: bigint;
    bridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlockRewardMock extends BaseContract {
  connect(runner?: ContractRunner | null): BlockRewardMock;
  waitForDeployment(): Promise<this>;

  interface: BlockRewardMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  mintedCoins: TypedContractMethod<[], [bigint], "view">;

  addBridgeNativeRewardReceivers: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  validatorRewardList: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  blockRewardContractId: TypedContractMethod<[], [string], "view">;

  setValidatorsRewards: TypedContractMethod<
    [_initialValidators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  mintedTotally: TypedContractMethod<[], [bigint], "view">;

  addBridgeTokenRewardReceivers: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeAmount: TypedContractMethod<[], [bigint], "view">;

  addExtraReceiver: TypedContractMethod<
    [_amount: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  validatorList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  mintedTotallyByBridge: TypedContractMethod<
    [_bridge: AddressLike],
    [bigint],
    "view"
  >;

  random: TypedContractMethod<[_count: BigNumberish], [bigint], "view">;

  addMintedTotallyByBridge: TypedContractMethod<
    [_amount: BigNumberish, _bridge: AddressLike],
    [void],
    "nonpayable"
  >;

  bridgeTokenReward: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintedCoins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addBridgeNativeRewardReceivers"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorRewardList"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockRewardContractId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setValidatorsRewards"
  ): TypedContractMethod<
    [_initialValidators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintedTotally"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addBridgeTokenRewardReceivers"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addExtraReceiver"
  ): TypedContractMethod<
    [_amount: BigNumberish, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "mintedTotallyByBridge"
  ): TypedContractMethod<[_bridge: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "random"
  ): TypedContractMethod<[_count: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "addMintedTotallyByBridge"
  ): TypedContractMethod<
    [_amount: BigNumberish, _bridge: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeTokenReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BridgeTokenRewardAdded"
  ): TypedContractEvent<
    BridgeTokenRewardAddedEvent.InputTuple,
    BridgeTokenRewardAddedEvent.OutputTuple,
    BridgeTokenRewardAddedEvent.OutputObject
  >;

  filters: {
    "BridgeTokenRewardAdded(uint256,uint256,address)": TypedContractEvent<
      BridgeTokenRewardAddedEvent.InputTuple,
      BridgeTokenRewardAddedEvent.OutputTuple,
      BridgeTokenRewardAddedEvent.OutputObject
    >;
    BridgeTokenRewardAdded: TypedContractEvent<
      BridgeTokenRewardAddedEvent.InputTuple,
      BridgeTokenRewardAddedEvent.OutputTuple,
      BridgeTokenRewardAddedEvent.OutputObject
    >;
  };
}
