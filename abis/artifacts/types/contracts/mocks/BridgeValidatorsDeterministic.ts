/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BridgeValidatorsDeterministicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "validatorCount"
      | "getBridgeValidatorsInterfacesVersion"
      | "isInitialized"
      | "removeValidator"
      | "addValidator"
      | "initialize"
      | "validatorList"
      | "setRequiredSignatures"
      | "requiredSignatures"
      | "getNextValidator"
      | "owner"
      | "isValidatorDuty"
      | "deployedAtBlock"
      | "F_ADDR"
      | "transferOwnership"
      | "isValidator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "RequiredSignaturesChanged"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeValidatorsInterfacesVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidatorDuty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "F_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeValidatorsInterfacesVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorDuty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "F_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequiredSignaturesChangedEvent {
  export type InputTuple = [requiredSignatures: BigNumberish];
  export type OutputTuple = [requiredSignatures: bigint];
  export interface OutputObject {
    requiredSignatures: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BridgeValidatorsDeterministic extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeValidatorsDeterministic;
  waitForDeployment(): Promise<this>;

  interface: BridgeValidatorsDeterministicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  validatorCount: TypedContractMethod<[], [bigint], "view">;

  getBridgeValidatorsInterfacesVersion: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { major: bigint; minor: bigint; patch: bigint }
    ],
    "view"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  removeValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  addValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _requiredSignatures: BigNumberish,
      _initialValidators: AddressLike[],
      _owner: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  validatorList: TypedContractMethod<[], [string[]], "view">;

  setRequiredSignatures: TypedContractMethod<
    [_requiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;

  requiredSignatures: TypedContractMethod<[], [bigint], "view">;

  getNextValidator: TypedContractMethod<
    [_address: AddressLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  isValidatorDuty: TypedContractMethod<
    [_validator: AddressLike],
    [boolean],
    "view"
  >;

  deployedAtBlock: TypedContractMethod<[], [bigint], "view">;

  F_ADDR: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  isValidator: TypedContractMethod<
    [_validator: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "validatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBridgeValidatorsInterfacesVersion"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { major: bigint; minor: bigint; patch: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _requiredSignatures: BigNumberish,
      _initialValidators: AddressLike[],
      _owner: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "setRequiredSignatures"
  ): TypedContractMethod<
    [_requiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextValidator"
  ): TypedContractMethod<[_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isValidatorDuty"
  ): TypedContractMethod<[_validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deployedAtBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "F_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[_validator: AddressLike], [boolean], "view">;

  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RequiredSignaturesChanged"
  ): TypedContractEvent<
    RequiredSignaturesChangedEvent.InputTuple,
    RequiredSignaturesChangedEvent.OutputTuple,
    RequiredSignaturesChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ValidatorAdded(address)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "RequiredSignaturesChanged(uint256)": TypedContractEvent<
      RequiredSignaturesChangedEvent.InputTuple,
      RequiredSignaturesChangedEvent.OutputTuple,
      RequiredSignaturesChangedEvent.OutputObject
    >;
    RequiredSignaturesChanged: TypedContractEvent<
      RequiredSignaturesChangedEvent.InputTuple,
      RequiredSignaturesChangedEvent.OutputTuple,
      RequiredSignaturesChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
