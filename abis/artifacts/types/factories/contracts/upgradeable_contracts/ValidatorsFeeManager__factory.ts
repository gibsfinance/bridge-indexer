/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ValidatorsFeeManager,
  ValidatorsFeeManagerInterface,
} from "../../../contracts/upgradeable_contracts/ValidatorsFeeManager";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "distributeFeeFromAffirmation",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setForeignFee",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setHomeFee",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "distributeFeeFromSignatures",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "REWARD_FOR_TRANSFERRING_FROM_FOREIGN",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "REWARD_FOR_TRANSFERRING_FROM_HOME",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getHomeFee",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_value",
        type: "uint256",
      },
      {
        name: "_recover",
        type: "bool",
      },
      {
        name: "_feeType",
        type: "bytes32",
      },
    ],
    name: "calculateFee",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getFeeManagerMode",
    outputs: [
      {
        name: "",
        type: "bytes4",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getForeignFee",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "fee",
        type: "uint256",
      },
    ],
    name: "HomeFeeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ForeignFeeUpdated",
    type: "event",
  },
] as const;

export class ValidatorsFeeManager__factory {
  static readonly abi = _abi;
  static createInterface(): ValidatorsFeeManagerInterface {
    return new Interface(_abi) as ValidatorsFeeManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ValidatorsFeeManager {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ValidatorsFeeManager;
  }
}
