/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPaymaster,
  IPaymasterInterface,
} from "../../../../contracts/gsn/interfaces/IPaymaster";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                name: "from",
                type: "address",
              },
              {
                name: "to",
                type: "address",
              },
              {
                name: "value",
                type: "uint256",
              },
              {
                name: "gas",
                type: "uint256",
              },
              {
                name: "nonce",
                type: "uint256",
              },
              {
                name: "data",
                type: "bytes",
              },
              {
                name: "validUntil",
                type: "uint256",
              },
            ],
            name: "request",
            type: "tuple",
          },
          {
            components: [
              {
                name: "gasPrice",
                type: "uint256",
              },
              {
                name: "pctRelayFee",
                type: "uint256",
              },
              {
                name: "baseRelayFee",
                type: "uint256",
              },
              {
                name: "relayWorker",
                type: "address",
              },
              {
                name: "paymaster",
                type: "address",
              },
              {
                name: "forwarder",
                type: "address",
              },
              {
                name: "paymasterData",
                type: "bytes",
              },
              {
                name: "clientId",
                type: "uint256",
              },
            ],
            name: "relayData",
            type: "tuple",
          },
        ],
        name: "relayRequest",
        type: "tuple",
      },
      {
        name: "signature",
        type: "bytes",
      },
      {
        name: "approvalData",
        type: "bytes",
      },
      {
        name: "maxPossibleGas",
        type: "uint256",
      },
    ],
    name: "preRelayedCall",
    outputs: [
      {
        name: "context",
        type: "bytes",
      },
      {
        name: "rejectOnRecipientRevert",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getRelayHubDeposit",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getHubAddr",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "context",
        type: "bytes",
      },
      {
        name: "success",
        type: "bool",
      },
      {
        name: "gasUseWithoutPost",
        type: "uint256",
      },
      {
        components: [
          {
            name: "gasPrice",
            type: "uint256",
          },
          {
            name: "pctRelayFee",
            type: "uint256",
          },
          {
            name: "baseRelayFee",
            type: "uint256",
          },
          {
            name: "relayWorker",
            type: "address",
          },
          {
            name: "paymaster",
            type: "address",
          },
          {
            name: "forwarder",
            type: "address",
          },
          {
            name: "paymasterData",
            type: "bytes",
          },
          {
            name: "clientId",
            type: "uint256",
          },
        ],
        name: "relayData",
        type: "tuple",
      },
    ],
    name: "postRelayedCall",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "versionPaymaster",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getGasAndDataLimits",
    outputs: [
      {
        components: [
          {
            name: "acceptanceBudget",
            type: "uint256",
          },
          {
            name: "preRelayedCallGasLimit",
            type: "uint256",
          },
          {
            name: "postRelayedCallGasLimit",
            type: "uint256",
          },
          {
            name: "calldataSizeLimit",
            type: "uint256",
          },
        ],
        name: "limits",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPaymaster__factory {
  static readonly abi = _abi;
  static createInterface(): IPaymasterInterface {
    return new Interface(_abi) as IPaymasterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPaymaster {
    return new Contract(address, _abi, runner) as unknown as IPaymaster;
  }
}
