/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IStakeManager,
  IStakeManagerInterface,
} from "../../../../contracts/gsn/interfaces/IStakeManager";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
      {
        name: "beneficiary",
        type: "address",
      },
      {
        name: "amount",
        type: "uint256",
      },
    ],
    name: "penalizeRelayManager",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "versionSM",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
    ],
    name: "unlockStake",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
      {
        name: "unstakeDelay",
        type: "uint256",
      },
    ],
    name: "stakeForAddress",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
      {
        name: "relayHub",
        type: "address",
      },
      {
        name: "minAmount",
        type: "uint256",
      },
      {
        name: "minUnstakeDelay",
        type: "uint256",
      },
    ],
    name: "isRelayManagerStaked",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
      {
        name: "relayHub",
        type: "address",
      },
    ],
    name: "authorizeHubByOwner",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
    ],
    name: "getStakeInfo",
    outputs: [
      {
        components: [
          {
            name: "stake",
            type: "uint256",
          },
          {
            name: "unstakeDelay",
            type: "uint256",
          },
          {
            name: "withdrawBlock",
            type: "uint256",
          },
          {
            name: "owner",
            type: "address",
          },
        ],
        name: "stakeInfo",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayHub",
        type: "address",
      },
    ],
    name: "authorizeHubByManager",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayManager",
        type: "address",
      },
      {
        name: "relayHub",
        type: "address",
      },
    ],
    name: "unauthorizeHubByOwner",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "relayHub",
        type: "address",
      },
    ],
    name: "unauthorizeHubByManager",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        name: "stake",
        type: "uint256",
      },
      {
        indexed: false,
        name: "unstakeDelay",
        type: "uint256",
      },
    ],
    name: "StakeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        name: "withdrawBlock",
        type: "uint256",
      },
    ],
    name: "StakeUnlocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        name: "amount",
        type: "uint256",
      },
    ],
    name: "StakeWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        name: "reward",
        type: "uint256",
      },
    ],
    name: "StakePenalized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "relayHub",
        type: "address",
      },
    ],
    name: "HubAuthorized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "relayManager",
        type: "address",
      },
      {
        indexed: true,
        name: "relayHub",
        type: "address",
      },
      {
        indexed: false,
        name: "removalBlock",
        type: "uint256",
      },
    ],
    name: "HubUnauthorized",
    type: "event",
  },
] as const;

export class IStakeManager__factory {
  static readonly abi = _abi;
  static createInterface(): IStakeManagerInterface {
    return new Interface(_abi) as IStakeManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IStakeManager {
    return new Contract(address, _abi, runner) as unknown as IStakeManager;
  }
}
