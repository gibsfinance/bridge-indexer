/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../../common";
import type {
  Sacrifice,
  SacrificeInterface,
} from "../../../../contracts/routers/WETHOmnibridgeRouterV2/Sacrifice";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x608060405260405160593803806059833981016040819052601e91602a565b806001600160a01b0316ff5b600060208284031215603b57600080fd5b81516001600160a01b0381168114605157600080fd5b939250505056fe";

type SacrificeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SacrificeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sacrifice__factory extends ContractFactory {
  constructor(...args: SacrificeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _recipient: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_recipient, overrides || {});
  }
  override deploy(
    _recipient: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_recipient, overrides || {}) as Promise<
      Sacrifice & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Sacrifice__factory {
    return super.connect(runner) as Sacrifice__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SacrificeInterface {
    return new Interface(_abi) as SacrificeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Sacrifice {
    return new Contract(address, _abi, runner) as unknown as Sacrifice;
  }
}
